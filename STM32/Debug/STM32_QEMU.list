
STM32_QEMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008b0  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a80  08000a80  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a80  08000a80  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a80  08000a80  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a80  08000a80  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a80  08000a80  00001a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a84  08000a84  00001a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000a88  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000a94  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000a94  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002155  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b89  00000000  00000000  0000418a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000340  00000000  00000000  00004d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000024c  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ee17  00000000  00000000  000052a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000030c4  00000000  00000000  000140bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b00e  00000000  00000000  0001717f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007218d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000af8  00000000  00000000  000721d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00072cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08000a68 	.word	0x08000a68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08000a68 	.word	0x08000a68

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000216:	f000 f8ec 	bl	80003f2 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021a:	f000 f815 	bl	8000248 <MX_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
  for (int i = 0 ; i < 10; i++)
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e00a      	b.n	800023a <main+0x2a>
  {
    HAL_GPIO_TogglePin(GPIOC, LD4_Pin);
 8000224:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000228:	4806      	ldr	r0, [pc, #24]	@ (8000244 <main+0x34>)
 800022a:	f000 fbdf 	bl	80009ec <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800022e:	2064      	movs	r0, #100	@ 0x64
 8000230:	f000 f938 	bl	80004a4 <HAL_Delay>
  for (int i = 0 ; i < 10; i++)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3301      	adds	r3, #1
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2b09      	cmp	r3, #9
 800023e:	ddf1      	ble.n	8000224 <main+0x14>
  }
  while (1)
 8000240:	bf00      	nop
 8000242:	e7fd      	b.n	8000240 <main+0x30>
 8000244:	40011000 	.word	0x40011000

08000248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b088      	sub	sp, #32
 800024c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024e:	f107 0310 	add.w	r3, r7, #16
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800025c:	4b1e      	ldr	r3, [pc, #120]	@ (80002d8 <MX_GPIO_Init+0x90>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a1d      	ldr	r2, [pc, #116]	@ (80002d8 <MX_GPIO_Init+0x90>)
 8000262:	f043 0310 	orr.w	r3, r3, #16
 8000266:	6193      	str	r3, [r2, #24]
 8000268:	4b1b      	ldr	r3, [pc, #108]	@ (80002d8 <MX_GPIO_Init+0x90>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	f003 0310 	and.w	r3, r3, #16
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000274:	4b18      	ldr	r3, [pc, #96]	@ (80002d8 <MX_GPIO_Init+0x90>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a17      	ldr	r2, [pc, #92]	@ (80002d8 <MX_GPIO_Init+0x90>)
 800027a:	f043 0320 	orr.w	r3, r3, #32
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	4b15      	ldr	r3, [pc, #84]	@ (80002d8 <MX_GPIO_Init+0x90>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0320 	and.w	r3, r3, #32
 8000288:	60bb      	str	r3, [r7, #8]
 800028a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028c:	4b12      	ldr	r3, [pc, #72]	@ (80002d8 <MX_GPIO_Init+0x90>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a11      	ldr	r2, [pc, #68]	@ (80002d8 <MX_GPIO_Init+0x90>)
 8000292:	f043 0304 	orr.w	r3, r3, #4
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b0f      	ldr	r3, [pc, #60]	@ (80002d8 <MX_GPIO_Init+0x90>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f003 0304 	and.w	r3, r3, #4
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80002aa:	480c      	ldr	r0, [pc, #48]	@ (80002dc <MX_GPIO_Init+0x94>)
 80002ac:	f000 fb86 	bl	80009bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80002b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80002b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b6:	2301      	movs	r3, #1
 80002b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002be:	2302      	movs	r3, #2
 80002c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	4619      	mov	r1, r3
 80002c8:	4804      	ldr	r0, [pc, #16]	@ (80002dc <MX_GPIO_Init+0x94>)
 80002ca:	f000 f9f3 	bl	80006b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ce:	bf00      	nop
 80002d0:	3720      	adds	r7, #32
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40011000 	.word	0x40011000

080002e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002e6:	4b15      	ldr	r3, [pc, #84]	@ (800033c <HAL_MspInit+0x5c>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	4a14      	ldr	r2, [pc, #80]	@ (800033c <HAL_MspInit+0x5c>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6193      	str	r3, [r2, #24]
 80002f2:	4b12      	ldr	r3, [pc, #72]	@ (800033c <HAL_MspInit+0x5c>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002fe:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <HAL_MspInit+0x5c>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	4a0e      	ldr	r2, [pc, #56]	@ (800033c <HAL_MspInit+0x5c>)
 8000304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000308:	61d3      	str	r3, [r2, #28]
 800030a:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <HAL_MspInit+0x5c>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000316:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <HAL_MspInit+0x60>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	4a04      	ldr	r2, [pc, #16]	@ (8000340 <HAL_MspInit+0x60>)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	40021000 	.word	0x40021000
 8000340:	40010000 	.word	0x40010000

08000344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <NMI_Handler+0x4>

0800034c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000350:	bf00      	nop
 8000352:	e7fd      	b.n	8000350 <HardFault_Handler+0x4>

08000354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <MemManage_Handler+0x4>

0800035c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <BusFault_Handler+0x4>

08000364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <UsageFault_Handler+0x4>

0800036c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000394:	f000 f86a 	bl	800046c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}

0800039c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003a8:	f7ff fff8 	bl	800039c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ac:	480b      	ldr	r0, [pc, #44]	@ (80003dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003ae:	490c      	ldr	r1, [pc, #48]	@ (80003e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003b0:	4a0c      	ldr	r2, [pc, #48]	@ (80003e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a09      	ldr	r2, [pc, #36]	@ (80003e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003c4:	4c09      	ldr	r4, [pc, #36]	@ (80003ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003d2:	f000 fb25 	bl	8000a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d6:	f7ff ff1b 	bl	8000210 <main>
  bx lr
 80003da:	4770      	bx	lr
  ldr r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003e4:	08000a88 	.word	0x08000a88
  ldr r2, =_sbss
 80003e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003ec:	2000002c 	.word	0x2000002c

080003f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <ADC1_IRQHandler>

080003f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f2:	b580      	push	{r7, lr}
 80003f4:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003f6:	2003      	movs	r0, #3
 80003f8:	f000 f928 	bl	800064c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000402:	f7ff ff6d 	bl	80002e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000406:	2300      	movs	r3, #0
}
 8000408:	4618      	mov	r0, r3
 800040a:	bd80      	pop	{r7, pc}

0800040c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000414:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <HAL_InitTick+0x54>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <HAL_InitTick+0x58>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4619      	mov	r1, r3
 800041e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000422:	fbb3 f3f1 	udiv	r3, r3, r1
 8000426:	fbb2 f3f3 	udiv	r3, r2, r3
 800042a:	4618      	mov	r0, r3
 800042c:	f000 f935 	bl	800069a <HAL_SYSTICK_Config>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000436:	2301      	movs	r3, #1
 8000438:	e00e      	b.n	8000458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2b0f      	cmp	r3, #15
 800043e:	d80a      	bhi.n	8000456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000440:	2200      	movs	r2, #0
 8000442:	6879      	ldr	r1, [r7, #4]
 8000444:	f04f 30ff 	mov.w	r0, #4294967295
 8000448:	f000 f90b 	bl	8000662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800044c:	4a06      	ldr	r2, [pc, #24]	@ (8000468 <HAL_InitTick+0x5c>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000452:	2300      	movs	r3, #0
 8000454:	e000      	b.n	8000458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000456:	2301      	movs	r3, #1
}
 8000458:	4618      	mov	r0, r3
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000000 	.word	0x20000000
 8000464:	20000008 	.word	0x20000008
 8000468:	20000004 	.word	0x20000004

0800046c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000470:	4b05      	ldr	r3, [pc, #20]	@ (8000488 <HAL_IncTick+0x1c>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	461a      	mov	r2, r3
 8000476:	4b05      	ldr	r3, [pc, #20]	@ (800048c <HAL_IncTick+0x20>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4413      	add	r3, r2
 800047c:	4a03      	ldr	r2, [pc, #12]	@ (800048c <HAL_IncTick+0x20>)
 800047e:	6013      	str	r3, [r2, #0]
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	20000008 	.word	0x20000008
 800048c:	20000028 	.word	0x20000028

08000490 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  return uwTick;
 8000494:	4b02      	ldr	r3, [pc, #8]	@ (80004a0 <HAL_GetTick+0x10>)
 8000496:	681b      	ldr	r3, [r3, #0]
}
 8000498:	4618      	mov	r0, r3
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	20000028 	.word	0x20000028

080004a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004ac:	f7ff fff0 	bl	8000490 <HAL_GetTick>
 80004b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004bc:	d005      	beq.n	80004ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004be:	4b0a      	ldr	r3, [pc, #40]	@ (80004e8 <HAL_Delay+0x44>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	461a      	mov	r2, r3
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	4413      	add	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004ca:	bf00      	nop
 80004cc:	f7ff ffe0 	bl	8000490 <HAL_GetTick>
 80004d0:	4602      	mov	r2, r0
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d8f7      	bhi.n	80004cc <HAL_Delay+0x28>
  {
  }
}
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000008 	.word	0x20000008

080004ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f003 0307 	and.w	r3, r3, #7
 80004fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <__NVIC_SetPriorityGrouping+0x44>)
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000508:	4013      	ands	r3, r2
 800050a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000514:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800051c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800051e:	4a04      	ldr	r2, [pc, #16]	@ (8000530 <__NVIC_SetPriorityGrouping+0x44>)
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	60d3      	str	r3, [r2, #12]
}
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000538:	4b04      	ldr	r3, [pc, #16]	@ (800054c <__NVIC_GetPriorityGrouping+0x18>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	0a1b      	lsrs	r3, r3, #8
 800053e:	f003 0307 	and.w	r3, r3, #7
}
 8000542:	4618      	mov	r0, r3
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	6039      	str	r1, [r7, #0]
 800055a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800055c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000560:	2b00      	cmp	r3, #0
 8000562:	db0a      	blt.n	800057a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	b2da      	uxtb	r2, r3
 8000568:	490c      	ldr	r1, [pc, #48]	@ (800059c <__NVIC_SetPriority+0x4c>)
 800056a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056e:	0112      	lsls	r2, r2, #4
 8000570:	b2d2      	uxtb	r2, r2
 8000572:	440b      	add	r3, r1
 8000574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000578:	e00a      	b.n	8000590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4908      	ldr	r1, [pc, #32]	@ (80005a0 <__NVIC_SetPriority+0x50>)
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	f003 030f 	and.w	r3, r3, #15
 8000586:	3b04      	subs	r3, #4
 8000588:	0112      	lsls	r2, r2, #4
 800058a:	b2d2      	uxtb	r2, r2
 800058c:	440b      	add	r3, r1
 800058e:	761a      	strb	r2, [r3, #24]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	e000e100 	.word	0xe000e100
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b089      	sub	sp, #36	@ 0x24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f003 0307 	and.w	r3, r3, #7
 80005b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	f1c3 0307 	rsb	r3, r3, #7
 80005be:	2b04      	cmp	r3, #4
 80005c0:	bf28      	it	cs
 80005c2:	2304      	movcs	r3, #4
 80005c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	3304      	adds	r3, #4
 80005ca:	2b06      	cmp	r3, #6
 80005cc:	d902      	bls.n	80005d4 <NVIC_EncodePriority+0x30>
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	3b03      	subs	r3, #3
 80005d2:	e000      	b.n	80005d6 <NVIC_EncodePriority+0x32>
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	f04f 32ff 	mov.w	r2, #4294967295
 80005dc:	69bb      	ldr	r3, [r7, #24]
 80005de:	fa02 f303 	lsl.w	r3, r2, r3
 80005e2:	43da      	mvns	r2, r3
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	401a      	ands	r2, r3
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ec:	f04f 31ff 	mov.w	r1, #4294967295
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	fa01 f303 	lsl.w	r3, r1, r3
 80005f6:	43d9      	mvns	r1, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	4313      	orrs	r3, r2
         );
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3724      	adds	r7, #36	@ 0x24
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3b01      	subs	r3, #1
 8000614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000618:	d301      	bcc.n	800061e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800061a:	2301      	movs	r3, #1
 800061c:	e00f      	b.n	800063e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061e:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <SysTick_Config+0x40>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3b01      	subs	r3, #1
 8000624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000626:	210f      	movs	r1, #15
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f7ff ff90 	bl	8000550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000630:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <SysTick_Config+0x40>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000636:	4b04      	ldr	r3, [pc, #16]	@ (8000648 <SysTick_Config+0x40>)
 8000638:	2207      	movs	r2, #7
 800063a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	e000e010 	.word	0xe000e010

0800064c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ff49 	bl	80004ec <__NVIC_SetPriorityGrouping>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000662:	b580      	push	{r7, lr}
 8000664:	b086      	sub	sp, #24
 8000666:	af00      	add	r7, sp, #0
 8000668:	4603      	mov	r3, r0
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000674:	f7ff ff5e 	bl	8000534 <__NVIC_GetPriorityGrouping>
 8000678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	68b9      	ldr	r1, [r7, #8]
 800067e:	6978      	ldr	r0, [r7, #20]
 8000680:	f7ff ff90 	bl	80005a4 <NVIC_EncodePriority>
 8000684:	4602      	mov	r2, r0
 8000686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800068a:	4611      	mov	r1, r2
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff5f 	bl	8000550 <__NVIC_SetPriority>
}
 8000692:	bf00      	nop
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ffb0 	bl	8000608 <SysTick_Config>
 80006a8:	4603      	mov	r3, r0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b08b      	sub	sp, #44	@ 0x2c
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006c6:	e169      	b.n	800099c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80006c8:	2201      	movs	r2, #1
 80006ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006cc:	fa02 f303 	lsl.w	r3, r2, r3
 80006d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	69fa      	ldr	r2, [r7, #28]
 80006d8:	4013      	ands	r3, r2
 80006da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80006dc:	69ba      	ldr	r2, [r7, #24]
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	f040 8158 	bne.w	8000996 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	4a9a      	ldr	r2, [pc, #616]	@ (8000954 <HAL_GPIO_Init+0x2a0>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d05e      	beq.n	80007ae <HAL_GPIO_Init+0xfa>
 80006f0:	4a98      	ldr	r2, [pc, #608]	@ (8000954 <HAL_GPIO_Init+0x2a0>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d875      	bhi.n	80007e2 <HAL_GPIO_Init+0x12e>
 80006f6:	4a98      	ldr	r2, [pc, #608]	@ (8000958 <HAL_GPIO_Init+0x2a4>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d058      	beq.n	80007ae <HAL_GPIO_Init+0xfa>
 80006fc:	4a96      	ldr	r2, [pc, #600]	@ (8000958 <HAL_GPIO_Init+0x2a4>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d86f      	bhi.n	80007e2 <HAL_GPIO_Init+0x12e>
 8000702:	4a96      	ldr	r2, [pc, #600]	@ (800095c <HAL_GPIO_Init+0x2a8>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d052      	beq.n	80007ae <HAL_GPIO_Init+0xfa>
 8000708:	4a94      	ldr	r2, [pc, #592]	@ (800095c <HAL_GPIO_Init+0x2a8>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d869      	bhi.n	80007e2 <HAL_GPIO_Init+0x12e>
 800070e:	4a94      	ldr	r2, [pc, #592]	@ (8000960 <HAL_GPIO_Init+0x2ac>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d04c      	beq.n	80007ae <HAL_GPIO_Init+0xfa>
 8000714:	4a92      	ldr	r2, [pc, #584]	@ (8000960 <HAL_GPIO_Init+0x2ac>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d863      	bhi.n	80007e2 <HAL_GPIO_Init+0x12e>
 800071a:	4a92      	ldr	r2, [pc, #584]	@ (8000964 <HAL_GPIO_Init+0x2b0>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d046      	beq.n	80007ae <HAL_GPIO_Init+0xfa>
 8000720:	4a90      	ldr	r2, [pc, #576]	@ (8000964 <HAL_GPIO_Init+0x2b0>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d85d      	bhi.n	80007e2 <HAL_GPIO_Init+0x12e>
 8000726:	2b12      	cmp	r3, #18
 8000728:	d82a      	bhi.n	8000780 <HAL_GPIO_Init+0xcc>
 800072a:	2b12      	cmp	r3, #18
 800072c:	d859      	bhi.n	80007e2 <HAL_GPIO_Init+0x12e>
 800072e:	a201      	add	r2, pc, #4	@ (adr r2, 8000734 <HAL_GPIO_Init+0x80>)
 8000730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000734:	080007af 	.word	0x080007af
 8000738:	08000789 	.word	0x08000789
 800073c:	0800079b 	.word	0x0800079b
 8000740:	080007dd 	.word	0x080007dd
 8000744:	080007e3 	.word	0x080007e3
 8000748:	080007e3 	.word	0x080007e3
 800074c:	080007e3 	.word	0x080007e3
 8000750:	080007e3 	.word	0x080007e3
 8000754:	080007e3 	.word	0x080007e3
 8000758:	080007e3 	.word	0x080007e3
 800075c:	080007e3 	.word	0x080007e3
 8000760:	080007e3 	.word	0x080007e3
 8000764:	080007e3 	.word	0x080007e3
 8000768:	080007e3 	.word	0x080007e3
 800076c:	080007e3 	.word	0x080007e3
 8000770:	080007e3 	.word	0x080007e3
 8000774:	080007e3 	.word	0x080007e3
 8000778:	08000791 	.word	0x08000791
 800077c:	080007a5 	.word	0x080007a5
 8000780:	4a79      	ldr	r2, [pc, #484]	@ (8000968 <HAL_GPIO_Init+0x2b4>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d013      	beq.n	80007ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000786:	e02c      	b.n	80007e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	623b      	str	r3, [r7, #32]
          break;
 800078e:	e029      	b.n	80007e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	3304      	adds	r3, #4
 8000796:	623b      	str	r3, [r7, #32]
          break;
 8000798:	e024      	b.n	80007e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	3308      	adds	r3, #8
 80007a0:	623b      	str	r3, [r7, #32]
          break;
 80007a2:	e01f      	b.n	80007e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	330c      	adds	r3, #12
 80007aa:	623b      	str	r3, [r7, #32]
          break;
 80007ac:	e01a      	b.n	80007e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d102      	bne.n	80007bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007b6:	2304      	movs	r3, #4
 80007b8:	623b      	str	r3, [r7, #32]
          break;
 80007ba:	e013      	b.n	80007e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d105      	bne.n	80007d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007c4:	2308      	movs	r3, #8
 80007c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	69fa      	ldr	r2, [r7, #28]
 80007cc:	611a      	str	r2, [r3, #16]
          break;
 80007ce:	e009      	b.n	80007e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007d0:	2308      	movs	r3, #8
 80007d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	69fa      	ldr	r2, [r7, #28]
 80007d8:	615a      	str	r2, [r3, #20]
          break;
 80007da:	e003      	b.n	80007e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
          break;
 80007e0:	e000      	b.n	80007e4 <HAL_GPIO_Init+0x130>
          break;
 80007e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	2bff      	cmp	r3, #255	@ 0xff
 80007e8:	d801      	bhi.n	80007ee <HAL_GPIO_Init+0x13a>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	e001      	b.n	80007f2 <HAL_GPIO_Init+0x13e>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3304      	adds	r3, #4
 80007f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	2bff      	cmp	r3, #255	@ 0xff
 80007f8:	d802      	bhi.n	8000800 <HAL_GPIO_Init+0x14c>
 80007fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	e002      	b.n	8000806 <HAL_GPIO_Init+0x152>
 8000800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000802:	3b08      	subs	r3, #8
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	210f      	movs	r1, #15
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	43db      	mvns	r3, r3
 8000816:	401a      	ands	r2, r3
 8000818:	6a39      	ldr	r1, [r7, #32]
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	fa01 f303 	lsl.w	r3, r1, r3
 8000820:	431a      	orrs	r2, r3
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082e:	2b00      	cmp	r3, #0
 8000830:	f000 80b1 	beq.w	8000996 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000834:	4b4d      	ldr	r3, [pc, #308]	@ (800096c <HAL_GPIO_Init+0x2b8>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a4c      	ldr	r2, [pc, #304]	@ (800096c <HAL_GPIO_Init+0x2b8>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b4a      	ldr	r3, [pc, #296]	@ (800096c <HAL_GPIO_Init+0x2b8>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800084c:	4a48      	ldr	r2, [pc, #288]	@ (8000970 <HAL_GPIO_Init+0x2bc>)
 800084e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000850:	089b      	lsrs	r3, r3, #2
 8000852:	3302      	adds	r3, #2
 8000854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000858:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800085a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085c:	f003 0303 	and.w	r3, r3, #3
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	220f      	movs	r2, #15
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	4013      	ands	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a40      	ldr	r2, [pc, #256]	@ (8000974 <HAL_GPIO_Init+0x2c0>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d013      	beq.n	80008a0 <HAL_GPIO_Init+0x1ec>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a3f      	ldr	r2, [pc, #252]	@ (8000978 <HAL_GPIO_Init+0x2c4>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d00d      	beq.n	800089c <HAL_GPIO_Init+0x1e8>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a3e      	ldr	r2, [pc, #248]	@ (800097c <HAL_GPIO_Init+0x2c8>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d007      	beq.n	8000898 <HAL_GPIO_Init+0x1e4>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a3d      	ldr	r2, [pc, #244]	@ (8000980 <HAL_GPIO_Init+0x2cc>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d101      	bne.n	8000894 <HAL_GPIO_Init+0x1e0>
 8000890:	2303      	movs	r3, #3
 8000892:	e006      	b.n	80008a2 <HAL_GPIO_Init+0x1ee>
 8000894:	2304      	movs	r3, #4
 8000896:	e004      	b.n	80008a2 <HAL_GPIO_Init+0x1ee>
 8000898:	2302      	movs	r3, #2
 800089a:	e002      	b.n	80008a2 <HAL_GPIO_Init+0x1ee>
 800089c:	2301      	movs	r3, #1
 800089e:	e000      	b.n	80008a2 <HAL_GPIO_Init+0x1ee>
 80008a0:	2300      	movs	r3, #0
 80008a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008a4:	f002 0203 	and.w	r2, r2, #3
 80008a8:	0092      	lsls	r2, r2, #2
 80008aa:	4093      	lsls	r3, r2
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008b2:	492f      	ldr	r1, [pc, #188]	@ (8000970 <HAL_GPIO_Init+0x2bc>)
 80008b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008b6:	089b      	lsrs	r3, r3, #2
 80008b8:	3302      	adds	r3, #2
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d006      	beq.n	80008da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000984 <HAL_GPIO_Init+0x2d0>)
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	492c      	ldr	r1, [pc, #176]	@ (8000984 <HAL_GPIO_Init+0x2d0>)
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	608b      	str	r3, [r1, #8]
 80008d8:	e006      	b.n	80008e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008da:	4b2a      	ldr	r3, [pc, #168]	@ (8000984 <HAL_GPIO_Init+0x2d0>)
 80008dc:	689a      	ldr	r2, [r3, #8]
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	43db      	mvns	r3, r3
 80008e2:	4928      	ldr	r1, [pc, #160]	@ (8000984 <HAL_GPIO_Init+0x2d0>)
 80008e4:	4013      	ands	r3, r2
 80008e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d006      	beq.n	8000902 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008f4:	4b23      	ldr	r3, [pc, #140]	@ (8000984 <HAL_GPIO_Init+0x2d0>)
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	4922      	ldr	r1, [pc, #136]	@ (8000984 <HAL_GPIO_Init+0x2d0>)
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	60cb      	str	r3, [r1, #12]
 8000900:	e006      	b.n	8000910 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000902:	4b20      	ldr	r3, [pc, #128]	@ (8000984 <HAL_GPIO_Init+0x2d0>)
 8000904:	68da      	ldr	r2, [r3, #12]
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	43db      	mvns	r3, r3
 800090a:	491e      	ldr	r1, [pc, #120]	@ (8000984 <HAL_GPIO_Init+0x2d0>)
 800090c:	4013      	ands	r3, r2
 800090e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000918:	2b00      	cmp	r3, #0
 800091a:	d006      	beq.n	800092a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <HAL_GPIO_Init+0x2d0>)
 800091e:	685a      	ldr	r2, [r3, #4]
 8000920:	4918      	ldr	r1, [pc, #96]	@ (8000984 <HAL_GPIO_Init+0x2d0>)
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	4313      	orrs	r3, r2
 8000926:	604b      	str	r3, [r1, #4]
 8000928:	e006      	b.n	8000938 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800092a:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <HAL_GPIO_Init+0x2d0>)
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	43db      	mvns	r3, r3
 8000932:	4914      	ldr	r1, [pc, #80]	@ (8000984 <HAL_GPIO_Init+0x2d0>)
 8000934:	4013      	ands	r3, r2
 8000936:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000940:	2b00      	cmp	r3, #0
 8000942:	d021      	beq.n	8000988 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <HAL_GPIO_Init+0x2d0>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	490e      	ldr	r1, [pc, #56]	@ (8000984 <HAL_GPIO_Init+0x2d0>)
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	4313      	orrs	r3, r2
 800094e:	600b      	str	r3, [r1, #0]
 8000950:	e021      	b.n	8000996 <HAL_GPIO_Init+0x2e2>
 8000952:	bf00      	nop
 8000954:	10320000 	.word	0x10320000
 8000958:	10310000 	.word	0x10310000
 800095c:	10220000 	.word	0x10220000
 8000960:	10210000 	.word	0x10210000
 8000964:	10120000 	.word	0x10120000
 8000968:	10110000 	.word	0x10110000
 800096c:	40021000 	.word	0x40021000
 8000970:	40010000 	.word	0x40010000
 8000974:	40010800 	.word	0x40010800
 8000978:	40010c00 	.word	0x40010c00
 800097c:	40011000 	.word	0x40011000
 8000980:	40011400 	.word	0x40011400
 8000984:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000988:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <HAL_GPIO_Init+0x304>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	43db      	mvns	r3, r3
 8000990:	4909      	ldr	r1, [pc, #36]	@ (80009b8 <HAL_GPIO_Init+0x304>)
 8000992:	4013      	ands	r3, r2
 8000994:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000998:	3301      	adds	r3, #1
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a2:	fa22 f303 	lsr.w	r3, r2, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f47f ae8e 	bne.w	80006c8 <HAL_GPIO_Init+0x14>
  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	372c      	adds	r7, #44	@ 0x2c
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	40010400 	.word	0x40010400

080009bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	807b      	strh	r3, [r7, #2]
 80009c8:	4613      	mov	r3, r2
 80009ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009cc:	787b      	ldrb	r3, [r7, #1]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d003      	beq.n	80009da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009d2:	887a      	ldrh	r2, [r7, #2]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009d8:	e003      	b.n	80009e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009da:	887b      	ldrh	r3, [r7, #2]
 80009dc:	041a      	lsls	r2, r3, #16
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	611a      	str	r2, [r3, #16]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80009fe:	887a      	ldrh	r2, [r7, #2]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4013      	ands	r3, r2
 8000a04:	041a      	lsls	r2, r3, #16
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	43d9      	mvns	r1, r3
 8000a0a:	887b      	ldrh	r3, [r7, #2]
 8000a0c:	400b      	ands	r3, r1
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	611a      	str	r2, [r3, #16]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
	...

08000a20 <__libc_init_array>:
 8000a20:	b570      	push	{r4, r5, r6, lr}
 8000a22:	2600      	movs	r6, #0
 8000a24:	4d0c      	ldr	r5, [pc, #48]	@ (8000a58 <__libc_init_array+0x38>)
 8000a26:	4c0d      	ldr	r4, [pc, #52]	@ (8000a5c <__libc_init_array+0x3c>)
 8000a28:	1b64      	subs	r4, r4, r5
 8000a2a:	10a4      	asrs	r4, r4, #2
 8000a2c:	42a6      	cmp	r6, r4
 8000a2e:	d109      	bne.n	8000a44 <__libc_init_array+0x24>
 8000a30:	f000 f81a 	bl	8000a68 <_init>
 8000a34:	2600      	movs	r6, #0
 8000a36:	4d0a      	ldr	r5, [pc, #40]	@ (8000a60 <__libc_init_array+0x40>)
 8000a38:	4c0a      	ldr	r4, [pc, #40]	@ (8000a64 <__libc_init_array+0x44>)
 8000a3a:	1b64      	subs	r4, r4, r5
 8000a3c:	10a4      	asrs	r4, r4, #2
 8000a3e:	42a6      	cmp	r6, r4
 8000a40:	d105      	bne.n	8000a4e <__libc_init_array+0x2e>
 8000a42:	bd70      	pop	{r4, r5, r6, pc}
 8000a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a48:	4798      	blx	r3
 8000a4a:	3601      	adds	r6, #1
 8000a4c:	e7ee      	b.n	8000a2c <__libc_init_array+0xc>
 8000a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a52:	4798      	blx	r3
 8000a54:	3601      	adds	r6, #1
 8000a56:	e7f2      	b.n	8000a3e <__libc_init_array+0x1e>
 8000a58:	08000a80 	.word	0x08000a80
 8000a5c:	08000a80 	.word	0x08000a80
 8000a60:	08000a80 	.word	0x08000a80
 8000a64:	08000a84 	.word	0x08000a84

08000a68 <_init>:
 8000a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6a:	bf00      	nop
 8000a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a6e:	bc08      	pop	{r3}
 8000a70:	469e      	mov	lr, r3
 8000a72:	4770      	bx	lr

08000a74 <_fini>:
 8000a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a76:	bf00      	nop
 8000a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7a:	bc08      	pop	{r3}
 8000a7c:	469e      	mov	lr, r3
 8000a7e:	4770      	bx	lr
